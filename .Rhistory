D <- f.xx(1,3)*fyy(1, 3) - (fxy(1, 3))^2
f.yy <- Deriv(f.y, x = 'y')
f.xy <- Deriv(f.x, x = 'y')
#so it has only one local minimum.
#lets verify this with the 2nd derivative test:
f.xx <- Deriv(f.x, x = 'x')
D <- f.xx(1,3)*fyy(1, 3) - (fxy(1, 3))^2
D <- f.xx(1,3)*f.yy(1, 3) - (f.xy(1, 3))^2
#we can see that D < 0 (D = 4).
#therefore, we now use the derivative of f.xx or f.yy
f.xx(1, 3)
f.2 <- function(x, y) x^2 + y^2 + x*y
plot3d(f.2)
f.2.y <- Deriv(f.2, x = 'y')
#let's find the derivative as always:
f.2.x <- Deriv(f.2, x = 'x')
#we can see that both of this functions contain both x and y variables
#therefore, solving for roots is more difficult
# we need to use the function 'multiroot()' with a function in terms of x:
#lets name that function:
func <- function(x) c(2*x[1] + x[2], 2*x[2] + x[1])
#Another example with a more difficult function
#this time we'll have to use the library rootSolve
library(rootSolve)
install.packages("rootSolve")
#Another example with a more difficult function
#this time we'll have to use the library rootSolve
library(rootSolve)
#we must name the function this way because it is the way that 'multiroot()' works.
multiroot(func)
#we must name the function this way because it is the way that 'multiroot()' works.
multiroot(f = func, start = c(0, 0))
#we can see that both of this functions contain both x and y variables
#therefore, solving for roots is more difficult
# we need to use the function 'multiroot()' with a function in terms of x:
#lets name that function:
func <- function(x) c(2*x[1] + x[2] + 3,
2*x[2] + x[1] + 10)
#we must name the function this way because it is the way that 'multiroot()' works.
multiroot(f = func, start = c(0, 0))
f.2.xx <- Deriv(f.2.x, x = 'x')
f.2.yy <- Deriv(f.2.y, x = 'y')
f.2.xy <- Deriv(f.2.x, x = 'y')
D <- f.2.xx(0,0)*f.2.yy(0,0) - (f.2.xy(0,0))^2
D
#D is positive therefore:
f.2.xx(0, 0)
f.1 <- function(x,y) x^2 + x*y + y^2 + y
library(Deriv)
#4th Lab problem:
library(rgl)
library(rootSolve)
f.1 <- function(x,y) x^2 + x*y + y^2 + y
plot3d(f.1, xlim = c(-10, 10),
ylim = c(-10, 10))
#find the partial derivatives:
f.1.x <- Deriv(f.1, x = 'x')
f.1.y <- Deriv(f.1, x = 'y')
f.1.xx <- Deriv(f.1.x, x = 'x')
f.1.yy <- Deriv(f.1.y, x = 'y')
f.1.xy <- Deriv(f.1.x, x = 'y')
#solve for the roots:
f.1.x
#solve for the roots:
#2*x+y = 0
#
f.1.y
RHs <- c(0, -1)
LHS <- matrix(2, 1, 1, 2,
byrow = TRUE, ncol = 2)
LHS <- matrix(c(2, 1, 1, 2),
byrow = TRUE, ncol = 2)
RHs <- c(0, -1)
#now solve for the roots:
solve(LHS, RHS)
RHS <- c(0, -1)
#now solve for the roots:
solve(LHS, RHS)
#let's look at the graph to verify if this is true:
plot3d(f.1.x, c(-10, 10))
#let's look at the graph to verify if this is true:
plot(f.1.x, c(-10, 10))
#let's look at the graph to verify if this is true:
plot(f.1.x, xlim = c(-10, 10) )
#let's look at the graph to verify if this is true:
plot(function(x) = -2*x, xlim = c(-10, 10) )
#let's look at the graph to verify if this is true:
plot(function(x)-2*x, xlim = c(-10, 10))
#let's look at the graph to verify if this is true:
plot3d(f.1)
#let's look at the graph to verify if this is true:
plot3d(f.1, xlim = c(-20, 20),
ylim = c(-20, 20))
D <- f.1.xx(1/3, -2/3)*f.1.yy(1/3, -2/3) - (f.xy(1/3, -2/3))^2
D
#D is positive so
f.1.xx(1/3, -2/3)
library(tidyverse)
library(tidyverse)
mod1 <- lm(mpg ~ wt, data = mtcars)
summary(mod1)
summary(mod1)
mod1 <- lm(mpg ~ wt, data = mtcars)
library(tidyverse)
#viewing residuals:
plot(x = mtcars$mpg, y = mod1$fitted.values, type = 'p', col = 'blue',
pch = c(16), size = c(1))
#let's take that to see the range in which mod1 works
summary(mod1)
#let's take that to see the range in which mod1 works
summary(mod1$fitted.values)
#viewing residuals:
plot(x = mtcars$mpg, y = mod1$fitted.values,
type = 'p', col = 'blue',
pch = c(16))
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted Values.')
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted Values.',
pch = c(16), col = 'green'
)
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted MPG Values.',
pch = c(16), col = 'green')
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted MPG Values.',
pch = c(16), col = 'green')
summary(mtcars$mpg)
plot(x = mtcars$wt, y = mtcars$mpg,
ylim = c(10, 34), col = 'red',
pch = c(16))
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted MPG Values.',
pch = c(16), col = 'green')
plot(x = mtcars$wt, y = mtcars$mpg,
ylim = c(10, 34), col = 'red',
pch = c(16))
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted MPG Values.',
pch = c(16), col = 'green')
plot(x = mtcars$wt, y = mtcars$mpg,
ylim = c(10, 34), col = 'red',
pch = c(16))
plot(x = mtcars$wt, y = mtcars$mpg,
ylim = c(10, 34), col = 'red',
pch = c(5))
plot(x = mtcars$wt, y = mtcars$mpg,
ylim = c(10, 34), col = 'red',
pch = c(16))
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted MPG Values.',
pch = c(16), col = 'green')
plot(x = mtcars$wt, y = mtcars$mpg,
ylim = c(10, 34), col = 'red',
pch = c(16), add = TRUE)
points(x = mtcars$wt, y = mtcars$mpg,
ylim = c(10, 34), col = 'red',
pch = c(16), add = TRUE)
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted MPG Values.',
pch = c(16), col = 'green')
points(x = mtcars$wt, y = mtcars$mpg,
ylim = c(10, 34), col = 'red',
pch = c(16), add = TRUE)
points(x = mtcars$wt, y = mtcars$mpg,
, col = 'red',
pch = c(16), add = TRUE)
points(x = mtcars$wt, y = mtcars$mpg,
, col = 'red',
pch = c(16), add = TRUE)
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted MPG Values.',
pch = c(16), col = 'green')
points(x = mtcars$wt, y = mtcars$mpg,
, col = 'red',
pch = c(16), add = TRUE)
points(x = mtcars$wt, y = mtcars$mpg,
, col = 'red',
pch = c(16))
plot(x = mtcars$wt, y = mod1$fitted.values,
ylim = c(8, 30), ylab = 'Predicted MPG Values.',
pch = c(16), col = 'green')
points(x = mtcars$wt, y = mtcars$mpg,
col = 'red',
pch = c(16))
#now, we will eplot the residuals(errors) directly:
plot(mod1$residuals)
#now, we will eplot the residuals(errors) directly:
summary(mod1$residuals)
plot(mod1$residuals, col = 'blue')
plot(mod1$residuals, col = 'blue', pch = c(16))
#also, plot the line of 0 to see where the resiudals are centered around.
abline(y = 0)
#also, plot the line of 0 to see where the resiudals are centered around.
abline(h= 0)
#lab 5 problem:
library(tidyverse)
library(rgl)
library(Deriv)
x <- as.matrix(cbind(mtcars[,'wt', 'hp']))
x <- as.matrix(mtcars[,'wt', 'hp'])
mtcars[,'wt']
mtcars[,'wt', 'hp']
view(mtcars)
mtcars$hp
mtcars[,c('wt', 'hp')]
mtcars[,c('wt', 'hp')])
x <- as.matrix(cbind(rep(1, length(mtcars$mpg)),
x
view(x)
x
a <- solve(t(x)%*%x)%*%t(x)%*%y
a
lm <- lm(mpg ~ wt + hp, data = mtcars)
View(lm)
y
view(mtcars)
mtcars$mpg
y <- as.matrix(mtcars$mpg)
View(y)
x <- as.matrix(cbind(rep(1, length(mtcars$mpg)),
a <- solve(t(x)%*%x)%*%t(x)%*%y
a
a <- solve(t(x)%*%x)%*%t(x)%*%y
x
a <- solve(t(x)%*%x)%*%t(x)%*%y
a <- solve(t(x.mat)%*%x.mat)%*%t(x.mat)%*%y.mat
y.mat <- as.matrix(mtcars$mpg)
x.mat <- as.matrix(cbind(rep(1, length(mtcars$mpg)),
a <- solve(t(x.mat)%*%x.mat)%*%t(x.mat)%*%y.mat
a
t(x.mat)
x.mat <- as.matrix(cbind(rep(1, length(mtcars$mpg)),
t(x.mat)
t(x.mat%*%x.mat
t(x.mat)%*%x.mat
x.mat <- as.matrix(cbind(rep(1, length(mtcars$mpg)),
t(x.mat)%*%x.mat
x.mat <- as.matrix(cbind(rep(1, length(mtcars$mpg)),
mtcars[,c('wt', 'hp')]))
x.mat <- as.matrix(cbind(rep(1, length(mtcars$mpg)),
mtcars[,c('wt', 'hp')]))
View(x.mat)
y.mat <- as.matrix(mtcars$mpg)
View(y.mat)
t(x.mat)%*%x.mat
a <- solve(t(x.mat)%*%x.mat)%*%t(x.mat)%*%(y.mat)
a
data.1 <- mtcars[,c('mpg', 'wt', 'hp')]
data.1 <- mtcars[,c('mpg', 'wt', 'hp')]
data.1 <- data.1 %>%
mutate(predicted.vals <- a[1] + a[2]*wt + a[3]*hp)
View(data.1)
a%*%x.mat
a%*%x.mat
x.mat <- as.matrix(cbind(rep(1, length(mtcars$mpg)),
mtcars[,c('wt', 'hp')]))
a%*%x.mat
a
x.mat
x.mat%*%a
data.1 <- data.1 %>%
mutate(predicted.vals = a[1] + a[2]*wt + a[3]*hp)
data.1$`predicted.vals
data.1$predicted.vals
data.1$`predicted.vals <- a[1] + a[2] * wt + a[3] * hp` <- NULL
View(data.1)
data.1$`predicted.vals <- a[1] + a[2] * wt + a[3] * hp` <- NULL
data.1
x.mat%*%a
t(a)%*%t(x)%*%y
t(a)%*%t(x)%*%y.mat
y.mat <- as.matrix(mtcars$mpg)
x.mat <- as.matrix(cbind(rep(1, length(mtcars$mpg)),
mtcars[,c('wt', 'hp')]))
a <- solve(t(x.mat)%*%x.mat)%*%t(x.mat)%*%(y.mat)
data.1 <- mtcars[,c('mpg', 'wt', 'hp')]
data.1 <- data.1 %>%
mutate(predicted.vals = a[1] + a[2]*wt + a[3]*hp)
t(a)%*%t(x)%*%y.mat
y.mat <- as.matrix(mtcars$mpg)
a <- solve(t(x.mat)%*%x.mat)%*%t(x.mat)%*%(y.mat)
t(a)%*%t(x)%*%y.mat
t(a)%*%t(x)
z%*% y
z %*% y.mat
y.mat
z
a
t(a)
t(x)
t(a) %*%t(x)
t(a) %*%t(x) %*% y
t(a) %*%t(x) %*% y.mat
y.mat
z
z <- t(a)%*%t(x)
z <- t(a)%*%t(x.mat)
z
z *%* y.mat
z %*% y.mat
k <- t(y.mat)%*%x.mat%*%a
k
z <- t(a)%*%t(x.mat)%*%y.mat
k <- t(y.mat)%*%x.mat%*%a
k == z
z
k
z == k
#now let's use the partial derivative we derived before to verify this value.
-2*t(x.mat)%*%y.mat + 2*t(x.mat)%*%x.mat%*%a
#now let's use the partial derivative we derived before to verify this value.
L <- -2*t(x.mat)%*%y.mat + 2*t(x.mat)%*%x.mat%*%a
round(L)
linearmodel.hp.wt <- lm(mpg ~ wt + hp, data = mtcars)
plot(x = mtcars$mpg, y = linearmodel.hp.wt$fitted.values)
plot(linearmodel.hp.wt$residuals)
summary(linearmodel.hp.wt$residuals)
SSE <- sum(data.1$mpg - linearmodel.hp.wt)
data.1$mpg
data.1
SSE <- sum(data.1$mpg - linearmodel.hp.wt)
SSE <- sum((data.1$mpg - linearmodel.hp.wt$fitted.values)^2)
SSE
#find the root mean squared error:
RMSE <- SSE/length(mtcars$mpg)
RMSE
#find the root mean squared error:
RMSE <- (SSE/length(mtcars$mpg))^(1/2)
RMSE
print(x)
for (x in 1:5)){
print(x)
}
for (x in 1:5)){
print(x)
}
for (x in 1:5){
print(x)
}
for (x in 0:5){
print(x)
}
v3 <- c(3,5,4)
v1 <- c(1,3,4)
v2 <- c(3,4,5)
v3 <- c(3,5,4)
#let's see if they are orthogonal and independent.
v1 %*% v2
v2%*% v3
v3%*% v1
w1 <- c(1,3,2)
w2 <- c(3,-1,0)
w3 <- c(1,3,-5)
source('~/RProjects/Orthogonality and Linear independedn.R')
source('~/RProjects/Orthogonality and Linear independedn.R')
source('~/RProjects/Orthogonality and Linear independence.R')
view(b.data)
b.data.view()
b.data
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
b.data
print(b.data[['Runs', 'ERA']])
b.data[1,2]
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
b.data
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
b.data
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
b.data
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
b.data
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
cov.data
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
eigen.decomp
eigen.demo
eigen.decomp
source('~/RProjects/Secition 3, problems 1-6/2ndproblem.R')
print(eigen.decomp)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
print(del.f)
y <- y - a*f.y(x, y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
print(x, y)
y
x
source('~/RProjects/Vector Calculus/Gradient Descent.R')
x
y
source('~/RProjects/Vector Calculus/Gradient Descent.R')
x
y
source('~/RProjects/Vector Calculus/Gradient Descent.R')
xn
yn
source('~/RProjects/Vector Calculus/Gradient Descent.R')
xn
yn
f(xm)
f(xn, yn)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(xn, yn)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(xn, yn)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(xn, yn)
source('~/.active-rstudio-document')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
xn
yn
f(xn, yn)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(x, y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(x, y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
y <- y - a*y.gradient
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
y
x
f(x, y)
f(x = x, y = y)
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
f(x = x, y = y)
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
f1(x = x, y = y)
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
x
y
f(x, y)
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
f(x, y)
x
y
plot(x = x.history, y = y.history)
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
y
f(x, y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(x, y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(x, y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(x, y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(x, y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(x=x, y = y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(x=x, y = y)
source('~/RProjects/Vector Calculus/Gradient Descent.R')
f(x=x, y = y)
source('~/RProjects/Secition 3, problems 1-6/3rdproblem.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
perfect.model
library("datasets", lib.loc="C:/Users/diego/Anaconda3/envs/rstudio/lib/R/library")
longley
library(datasets)
library(datasets)
data <- as.data.frame(longley)
View(data)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
cor(longley$Employed, longley$GNP)
longley[,1]
source('~/.active-rstudio-document')
legth(data)
length(data)
print(i)
for (i in range 1:7){
print(i)
}
for (i in range 1:7){
print(i)
}
for (i in range 1:7){
print(i)
}
for (i in range 1:7){
print(i)
}
print(i)
