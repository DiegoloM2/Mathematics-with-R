plot3d(x = game.cost$hot.dogs,
y = game.cost$fries,
z = game.cost$total.cost,
type = 'p',
col = 'green',
xlim = c(0,21),
ylim = c(0, 21),
zlim = c(0,120),
xlab = 'num of hot dogs bought',
ylab = 'num of fry buckets bought',
zlab = 'total cost')
source('~/RProjects/Linear_regression.R')
#do a plot to visualize
plot3d(x = game.cost$hot.dogs,
y = game.cost$fries,
z = game.cost$total.cost,
type = 'p',
col = 'green',
xlim = c(0,21),
ylim = c(0, 21),
zlim = c(0,120),
xlab = 'num of hot dogs bought',
ylab = 'num of fry buckets bought',
zlab = 'total cost')
#use lm() function to create a linear regression model
hot.dog.model <- lm(total.cost ~ Hot.dogs + fries, data = game.cost)
source('~/RProjects/Linear_regression.R')
#create an equation that gives the total price i.e. a very simple linear regression
game.cost <- game.cost %>%
mutate(Ticket = 20,
total.cost = Ticket + 3*hot.dogs + 2*Fries)
#use lm() function to create a linear regression model
hot.dog.model <- lm(total.cost ~ Hot.dogs + fries, data = game.cost)
#use lm() function to create a linear regression model
hot.dog.model <- lm(total.cost ~ hot.dogs + fries, data = game.cost)
hot.dog.model
hot.dog.model
hot.dog.model
summarise(hot.dog.model)
hot.dog.model
summarise(hot.dog.model)
summary(hot.dog.model)
hot.dog.model
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
xlim = c(0, max(mtcars$wt)),
ylim = c(0, max(mtcars&qsec)),
zlim = c(0, max(mtcars&mpg)),
zlab = 'MPG')
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
xlim = c(0, max(mtcars$wt)),
ylim = c(0, max(mtcars&qsec)),
zlim = c(0, max(mtcars&mpg)),
zlab = 'MPG')
mtcars$qsec
max(mtcars$qsec)
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
xlim = c(0, max(mtcars$wt)),
ylim = c(0, max(mtcars$qsec)),
zlim = c(0, max(mtcars$mpg)),
zlab = 'MPG')
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's'
xlim = c(0, max(mtcars$wt)),
ylim = c(0, max(mtcars$qsec)),
zlim = c(0, max(mtcars$mpg)),
zlab = 'MPG')
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
xlim = c(0, max(mtcars$wt)),
ylim = c(0, max(mtcars$qsec)),
zlim = c(0, max(mtcars$mpg)),
zlab = 'MPG')
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
col = 'red'
xlim = c(0, max(mtcars$wt)),
ylim = c(0, max(mtcars$qsec)),
zlim = c(0, max(mtcars$mpg)),
zlab = 'MPG')
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
col = 'red',
xlim = c(0, max(mtcars$wt)),
ylim = c(0, max(mtcars$qsec)),
zlim = c(0, max(mtcars$mpg)),
zlab = 'MPG')
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
col = 'red',
xlim = c(min(mtcats$wt), max(mtcars$wt)),
ylim = c(min(mtcars$qsec), max(mtcars$qsec)),
zlim = c(min(mtcars$mpg), max(mtcars$mpg)),
zlab = 'MPG')
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
col = 'red',
xlim = c(min(mtcars$wt), max(mtcars$wt)),
ylim = c(min(mtcars$qsec), max(mtcars$qsec)),
zlim = c(min(mtcars$mpg), max(mtcars$mpg)),
zlab = 'MPG')
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
col = 'red',
xlim = c(min(mtcars$wt), max(mtcars$wt)),
ylim = c(min(mtcars$qsec), max(mtcars$qsec)),
zlim = c(min(mtcars$mpg), max(mtcars$mpg)),
zlab = 'MPG', lwd 0= 1)
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
col = 'red',
xlim = c(min(mtcars$wt), max(mtcars$wt)),
ylim = c(min(mtcars$qsec), max(mtcars$qsec)),
zlim = c(min(mtcars$mpg), max(mtcars$mpg)),
zlab = 'MPG', lwd = 1)
#first, let's do a plot to visualize the data
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
col = 'red',
xlim = c(min(mtcars$wt), max(mtcars$wt)),
ylim = c(min(mtcars$qsec), max(mtcars$qsec)),
zlim = c(min(mtcars$mpg), max(mtcars$mpg)),
zlab = 'MPG', lwd = 1)
#use lm() fnuction to fit a model
mpg.model <- lm(mpg ~ qsec + qsec, data = mtcars)
mpg.model
#look at a summary to see how the model worked
summary(mpg)
#look at a summary to see how the model worked
summary(mpg.model)
#use lm() fnuction to fit a model
mpg.model <- lm(mpg ~ wt + qsec, data = mtcars)
#look at a summary to see how the model worked
mpg.model #model = -5.1
#plot model vs actual values
plot(mtcars$mpg, mtcars$fitted.values)
#plot model vs actual values
plot(mtcars$mpg, mtcars$fitted.values)
#use lm() fnuction to fit a model
mpg.model <- lm(mpg ~ wt + qsec, data = mtcars)
#look at a summary to see how the model worked
mpg.model #model = 19.81 -5.04802t - 0,9292qsec
#plot model vs actual values
plot(mtcars$mpg, mtcars$fitted.values)
#plot model vs actual values
plot(mtcars$mpg, mtcars$fitted.values)
mtcars$fitted.values
mtcars[, fitted.values()]
#first, let's do a plot to visualize the data
mtcars <- mtcars
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
col = 'red',
xlim = c(min(mtcars$wt), max(mtcars$wt)),
ylim = c(min(mtcars$qsec), max(mtcars$qsec)),
zlim = c(min(mtcars$mpg), max(mtcars$mpg)),
zlab = 'MPG', lwd = 1)
#use lm() fnuction to fit a model
mpg.model <- lm(mpg ~ wt + qsec, data = mtcars)
#plot model vs actual values
plot(mtcars$mpg, mtcars$fitted.values)
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
col = 'red',
xlim = c(min(mtcars$wt), max(mtcars$wt)),
ylim = c(min(mtcars$qsec), max(mtcars$qsec)),
zlim = c(min(mtcars$mpg), max(mtcars$mpg)),
zlab = 'MPG', lwd = 1)
fitted.values -< mtcars$fitted.values
fitted_values -< mtcars$fitted.values
fitted_values <- mtcars$fitted.values
source('~/RProjects/Linear_regression.R')
plot3d(x = mtcars$wt,
y = mtcars$qsec,
z = mpg.model$fitted.values,
type = 's',
col = 'red',
size = 4)
library(rgl)
#Linear regression
library(tidyverse)
#deterministic example
hot.dogs <- 0:20 #number of possible hot dogs and fries bought
fries <- 0:20
#use the function expand grid to create a cross product of hot dogs and fries
game.cost <- expand.grid(hot.dogs, fries)
#create an equation that gives the total price i.e. a very simple linear regression
game.cost <- game.cost %>%
mutate(Ticket = 20,
total.cost = Ticket + (3*hot.dogs) + 2*fries)
#do a plot to visualize
plot3d(x = game.cost$hot.dogs,
y = game.cost$fries,
z = game.cost$total.cost,
col = 'green',
xlim = c(0,21),
ylim = c(0, 21),
zlim = c(0,120),
xlab = 'num of hot dogs bought',
ylab = 'num of fry buckets bought',
zlab = 'total cost',
type = 'p' )
#use lm() function to create a linear regression model (estimate the regression coefficients)
hot.dog.model <- lm(total.cost ~ hot.dogs + fries, data = game.cost)
View(hot.dog.model)
#use lm() function to create a linear regression model (estimate the regression coefficients)
hot.dog.model <- lm(total.cost ~ hot.dogs + fries, data = game.cost)
game.cost$hot.var1
view(game.cost)
#name the columns of the dataframe.
colnames(game.cost) <- c('hot.dogs', 'fries')
View(game.cost)
#create an equation that gives the total price i.e. a very simple linear regression
game.cost <- game.cost %>%
mutate(Ticket = 20,
total.cost = Ticket + (3*hot.dogs) + 2*fries)
#use the function expand grid to create a cross product of hot dogs and fries
game.cost <- expand.grid(hot.dogs, fries)
#name the columns of the dataframe.
colnames(game.cost) <- c('hot.dogs', 'fries')
#create an equation that gives the total price i.e. a very simple linear regression
game.cost <- game.cost %>%
mutate(total.cost = 20 + (3*hot.dogs) + 2*fries)
#use lm() function to create a linear regression model (estimate the regression coefficients)
hot.dog.model <- lm(total.cost ~ hot.dogs + fries, data = game.cost)
View(hot.dog.model)
#first, let's do a plot to visualize the data
mtcars <- mtcars
plot3d(
x = mtcars$wt,
y = mtcars$qsec,
z = mtcars$mpg,
type = 's',
size = c(3),
col = 'green',
xlim = c(min(mtcars$wt) - 0.5, max(mtcars$wt) +0.5),
ylim = c(min(mtcars$qsec) -0.5, 0.5 + max(mtcars$qsec)),
zlim = c(min(mtcars$mpg) - 1, max(mtcars$mpg) +1),
zlab = 'MPG', lwd = 0,
xlab = 'Weight',
ylab = 'Q seconds'
)
#use lm() fnuction to fit a model
mpg.model <- lm(mpg ~ wt + qsec, data = mtcars)
#take out the fitted values from the model
fitted_values <- mpg.model$fitted.values
error.mpg <- cbind.data.frame(mtcars$mpg, mpg.model$fitted.values)
View(error.mpg)
error.mpg %>%
mutate(error = error.mpg$`mtcars$mpg`- error.mpg$`mpg.model$fitted.values`,
squared.error = error^2)
library(tidyverse)
cbind.data.frame(mtcars$mpg, mtcars$mpg, mtcars$qsec)
x <- cbind.data.frame(mtcars$mpg, mtcars$mpg, mtcars$qsec)
view(x)
error.mpg
error.mpg %>%
mutate(error = error.mpg$`mtcars$mpg`- error.mpg$`mpg.model$fitted.values`,
squared.error = error^2)
#now calculate the mean squared error (mse)
mse <- mean(c(error.mpg$squared.error))
#now calculate the mean squared error (mse)
mse <- mean(error.mpg$squared.error)
error.mpg %>%
mutate(error = error.mpg$`mtcars$mpg`- error.mpg$`mpg.model$fitted.values`,
squared.error = error^2)
error.mpg <- error.mpg %>%
mutate(error = error.mpg$`mtcars$mpg`- error.mpg$`mpg.model$fitted.values`,
squared.error = error^2)
error.mpg$squared.error
#now calculate the mean squared error (mse)
mse <- mean(error.mpg$squared.error)
mse
#from this, find the mean error of the estimations:
me <- mse^(1/2)
me
#from this, find the root of the mean squared error (rmse) of  the estimations:
rmse <- mse^(1/2)
rmse
X_1  <- matrix(rep(1,3), c(0,2,5,2,2,3))
X_1  <- matrix(rep(1,3), c(0,2,5,2,2,3)
X_1  <- matrix( c(0,2,5,2,2,3)
X_1  <- matrix(c(0,2,5,2,2,3)
X_1  <- matrix(c(1,1,1,0,2,5,2,2,3)
X_1 <- matrix(c(1,1,1,0,2,5,2,2,3)
view(X_1)
x_1
x_1 <- matrix(c(1,1,1,0,2,5,2,2,3)
x_1
y.1<- c(24, 30, 41)
x.1 <- matrix(c(1,1,1,0,2,5,2,2,3)
y.1
x.1<- matrix(c(1,1,1,0,2,5,2,2,3)
x.1<- matrix(c(1,1,1,0,2,5,2,2,3))
y.1<- matrix(c(24, 30, 41))
x.1<- matrix(c(1,1,1,0,2,5,2,2,3))
View(x)
View(x.1)
x.1<- matrix(c(1,1,1,0,2,5,2,2,3), nrow = 3)
View(x.1)
View(y.1)
View(x.1)
a <- solve(t(x.1)%*%(x.1))%*%t(x.1)%*%y.1
View(a)
source('~/.active-rstudio-document')
x <- cbind(mtcars$mpg, mtcars$qsec, mtcars$wt)
#Stochastic Example:
mtcars <- mtcars
x.
x
y <- matrix(mtcars$mtcars)
y <- matrix(c(mtcars$mpg))
y
x <- matrix(cbind(mtcars$qsec, mtcars$wt))
x
x <- matrix(cbind(mtcars$qsec, mtcars$wt), nrow = 2)
x
View(x)
x <- matrix(cbind(mtcars$qsec, mtcars$wt), ncol = 2)
View(x)
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
a.coefficient
x <- matrix(c(1,1,1), cbind(mtcars$qsec, mtcars$wt), ncol = 3)
View(x)
x <- matrix(c(1,1,1), mtcars$qsec, mtcars$wt, ncol = 3)
View(V1)
View(x)
x <- matrix(c(1,1,1, mtcars$qsec, mtcars$wt), ncol = 3)
x <- matrix(cbind(c(1,1,1), mtcars$qsec, mtcars$wt), ncol = 3)
x <- matrix(cbind(rep(1,20), mtcars$qsec, mtcars$wt), ncol = 3)
mtcars$qsec
x <- matrix(cbind(mtcars$qsec, mtcars$qsec), ncol = 3)
x <- matrix(cbind(mtcars$qsec, mtcars$qsec))
View(x)
x <- matrix(cbind(rep(1, mtcars$mpg),mtcars$qsec, mtcars$qsec))
x <- matrix(cbind(rep(1, length(mtcars$mpg),mtcars$qsec, mtcars$qsec))
x <- matrix(cbind(rep(1, length(mtcars$mpg)),mtcars$qsec, mtcars$qsec))
x <- matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$qsec, mtcars$qsec))
X
x
x <- matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$qsec, mtcars$qsec), ncol = 32)
x
x <- matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$qsec, mtcars$qsec), nrow = 32)
x
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
y
#the independent variables.
x <- matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$qsec, mtcars$qsec), nrow = 32)
x
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
y <- as.matrix(c(mtcars$mpg)) #response (dependent variable)
#the independent variables.
x <- as.matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$qsec, mtcars$qsec), nrow = 32)
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
#the independent variables.
x <- as.matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$qsec, mtcars$qsec))
x
y <- as.matrix(c(mtcars$mpg)) #response (dependent variable)
y
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
t(x)
t(x)%*%x
solve(t(x)%*%x)
solve(t(x)%*%x)
z <- t(x)%*%x
solve(z)
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
y <- as.matrix(mtcars$mpg) #response (dependent variable)
y
y <- as.matrix(mtcars$mpg) #response (dependent variable)
#the independent variables.
x <- as.matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$qsec, mtcars$qsec))
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
t(x)%*%x
solve(t(x)%*%x)
#the independent variables.
x <- as.matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$qsec, mtcars$wt))
t(x)%*%x
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
a.coefficient
#the independent variables.
x <- as.matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$wt, mtcars$qsec))
#then use the equation to solve for the coefficients of the variables.
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
a.coefficient
inputs <- mtcars[,c('mpg', 'wt', 'qsec')]
inputs
a
a.coefficient
lm <- inputs %>%
mutate(prediction = a.coefficient[1] + a.coefficient[2]*wt + a.coefficient[3]*qsec)
lm
#the independent variables.
x <- as.matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$qsec, mtcars$wt))
#then use the equation to solve for the coefficients of the variables.
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
a.coefficient
#the independent variables.
x <- as.matrix(cbind(rep(1, length(mtcars$mpg)), mtcars$wt, mtcars$qsec))
#then use the equation to solve for the coefficients of the variables.
a.coefficient <- solve(t(x)%*%x)%*%t(x)%*%y
a.coefficient
library(rgl)
#lab problem 5:
library(tidyverse)
b.data <- read.csv(file = 'C:\\Users\\diego\\OneDrive\\Documentos\\Baseball2018.csv', header = TRUE)
data.r <- b.data %>%
select(Runs, H9, HomeRun)
plot3d(
x = data.r$HomeRun,
y = data.r$H9,
z = data.r$Runs,
zlab ='runs',
ylab = 'Holes per 9 strikes',
xlab = 'Home Runs',
col = 'red',
type = 's',
size = c(3), lwd= 0
)
lmodel <- lm(Runs ~ H9 + HomeRun, data = data.r)
fit.vals <- lmodel$fitted.values
plot(x = data.r$Runs,
y = fit.vals,
xlab = 'actual data',
ylab = 'prediced data')
se <- cbind.data.frame(data.r$Runs, fit.vals)
View(se)
colnames <- c('Actual', 'Predicted')
View(se)
se <- cbind.data.frame(data.r$Runs, fit.vals,
colnames = c('actual', 'predicted'))
View(se)
se <- cbind.data.frame(data.r$Runs, fit.vals)
colnames(se) <- c('actual', 'predicted')
View(se)
se$actual
df.error <- se %>%
mutate(error = (actual-predicted), squared.error = error^2)
View(df.error)
mse <- mean(df.error$squared.error)^(1/2)
mse
rmse <- mean(df.error$squared.error)^(1/2)
View(df.error)
source('~/RProjects/problem5.R')
source('~/RProjects/problem5.R')
b.data <- read.csv(file = 'C:\\Users\\diego\\OneDrive\\Documentos\\Baseball2018.csv', header = TRUE)
data.r <- b.data %>%
select(Runs, H9, HomeRun)
plot3d(
x = data.r$HomeRun,
y = data.r$H9,
z = data.r$Runs,
zlab ='runs',
ylab = 'Holes per 9 strikes',
xlab = 'Home Runs',
col = 'red',
type = 's',
size = c(3), lwd= 0
)
lmodel <- lm(Runs ~ H9 + HomeRun, data = data.r)
plot(x = data.r$Runs,
y = fit.vals,
xlab = 'actual data',
ylab = 'prediced data')
se <- cbind.data.frame(data.r$Runs, fit.vals)
colnames(se) <- c('actual', 'predicted')
df.error <- se %>%
mutate(squared.error = (actual-predicted)^2)
rmse <- mean(df.error$squared.error)^(1/2)
source('~/RProjects/problem5.R')
source('~/RProjects/problem5.R')
source('~/RProjects/problem5.R')
source('~/RProjects/problem5.R')
source('~/RProjects/5thproject.R')
